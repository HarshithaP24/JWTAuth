{"version":3,"sources":["../../src/middleware/1.js"],"names":["signAccessToken","userId","Promise","resolve","reject","payload","name","secret","options","JWT","sign","err","token"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEO,IAAMA,4CAAkB,SAAlBA,eAAkB,CAACC,MAAD,EAAY;AACvC,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,YAAMC,UAAU;AACZC,kBAAM;AADM,SAAhB;AAGA,YAAMC,SAAS,WAAf;AACA,YAAMC,UAAU,EAAhB;;AAEAC,0BAAIC,IAAJ,CAASL,OAAT,EAAkBE,MAAlB,EAA0BC,OAA1B,EAAmC,UAACG,GAAD,EAAKC,KAAL,EAAa;AAC5C,gBAAGD,GAAH,EAAQP,OAAOO,GAAP;AACRR,oBAAQS,KAAR;AACH,SAHD;AAIH,KAXM,CAAP;AAYH,CAbM","file":"1.js","sourcesContent":["import { JWT } from \"jsonwebtoken\";\r\nimport createError from \"http-errors\";\r\n\r\nexport const signAccessToken = (userId) => {\r\n    return new Promise((resolve, reject)=>{\r\n        const payload = {\r\n            name: 'test'\r\n        }\r\n        const secret = 'secretKey'\r\n        const options = {}\r\n\r\n        JWT.sign(payload, secret, options, (err,token)=>{\r\n            if(err) reject(err)\r\n            resolve(token)\r\n        })\r\n    })\r\n}"]}