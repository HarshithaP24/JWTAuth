{"version":3,"sources":["../../src/services/userQuery.js"],"names":["getQuery","req","res","client","query","then","send","result","rows","console","log","catch","err","message","insertQuery","data","body","title","salutation","dob","locale","username","password","pwdexpirydate","mobilenumber","altcontactnumber","emailid","createddate","lastmodifieddate","createdby","lastmodifiedby","active","name","gender","pan","aadhaarnumber","type","version","guardian","guardianrelation","signature","accountlocked","bloodgroup","photo","identificationmark","tenantid","id","uuid","accountlockeddate","insert","insertInto","selectQuery","roles","forEach","role","getUser","callback","user"],"mappings":"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","file":"userQuery.js","sourcesContent":["import { CommandCompleteMessage } from \"pg-protocol/dist/messages\";\r\nimport ConnectionParameters from \"pg/lib/connection-parameters\";\r\nimport { client } from \"../app\";\r\n\r\nexport const getQuery = function(req, res){\r\n    // client.connect();\r\n    client\r\n        .query('select roles.role_code, users.id, users.username, users.tenantid from public.eg_test_userrole_v1 as roles inner join public.eg_test_user_table as users on roles.user_id = users.id')\r\n        .then(result => {\r\n            // let responseJosn={};\r\n            // result.rows.forEach(obj => {\r\n            // })\r\n            res.send(result.rows);\r\n            console.log(\"query run successfully\");\r\n        })\r\n        .catch(err => {\r\n            res.send(err.message);\r\n        })\r\n        // .finally(() => {\r\n        //     client.end();\r\n        // })\r\n}\r\n\r\nexport const insertQuery = function(req, res){\r\n    let data = req.body; \r\n    let insertQuery = `insert into eg_test_user_table(title, salutation, dob, locale, username, password, pwdexpirydate, mobilenumber, altcontactnumber, emailid, createddate, lastmodifieddate, createdby, lastmodifiedby, active, name, gender, pan, aadhaarnumber, type, version, guardian, guardianrelation, signature, accountlocked, bloodgroup, photo, identificationmark, tenantid, id, uuid, accountlockeddate)\r\n        values ('${data.title}', '${data.salutation}', '${data.dob}', '${data.locale}', '${data.username}', '${data.password}', '${data.pwdexpirydate}', '${data.mobilenumber}', '${data.altcontactnumber}', '${data.emailid}', '${data.createddate}', '${data.lastmodifieddate}', ${data.createdby}, ${data.lastmodifiedby}, ${data.active}, '${data.name}', ${data.gender}, '${data.pan}', '${data.aadhaarnumber}', '${data.type}', '${data.version}', '${data.guardian}', '${data.guardianrelation}', '${data.signature}', ${data.accountlocked}, '${data.bloodgroup}', '${data.photo}', '${data.identificationmark}', '${data.tenantid}', ${data.id}, ${data.uuid}, ${data.accountlockeddate})`\r\n        \r\n    //console.log(\"check query1: \"+insertQuery);\r\n    // client.connect();\r\n    client\r\n        .query(insertQuery)\r\n        .then(result=>{\r\n            res.send('Insertion was successful')\r\n        })\r\n        .catch(err => {\r\n            res.send(err.message);\r\n        })\r\n        // .finally(() => {\r\n        //     client.end();\r\n        // })\r\n}\r\n\r\nexport const insert = function(req,res){\r\n    let data = req.body;\r\n    let insertQuery = `insert into eg_test_user_table(title, salutation, dob, locale, username, password, pwdexpirydate, mobilenumber, altcontactnumber, emailid, createddate, lastmodifieddate, createdby, lastmodifiedby, active, name, gender, pan, aadhaarnumber, type, version, guardian, guardianrelation, signature, accountlocked, bloodgroup, photo, identificationmark, tenantid, id, uuid, accountlockeddate)\r\n        values ('${data.title}', '${data.salutation}', '${data.dob}', '${data.locale}', '${data.username}', '${data.password}', '${data.pwdexpirydate}', '${data.mobilenumber}', '${data.altcontactnumber}', '${data.emailid}', '${data.createddate}', '${data.lastmodifieddate}', ${data.createdby}, ${data.lastmodifiedby}, ${data.active}, '${data.name}', ${data.gender}, '${data.pan}', '${data.aadhaarnumber}', '${data.type}', '${data.version}', '${data.guardian}', '${data.guardianrelation}', '${data.signature}', ${data.accountlocked}, '${data.bloodgroup}', '${data.photo}', '${data.identificationmark}', '${data.tenantid}', ${data.id}, ${data.uuid}, ${data.accountlockeddate})`    \r\n        \r\n    //console.log(\"check query2: \",insertQuery);\r\n    res = client.query(insertQuery);\r\n    return res;\r\n}\r\n\r\nexport const insertInto = function(req,res){\r\n    let data = req.body;\r\n    let insertQuery = \"\";\r\n    let selectQuery = `select id,tenantid from eg_test_user_table where id = ${data.id} AND tenantid='${data.tenantid}'`\r\n    client.query(selectQuery).then(result => {\r\n        console.log(\"check id: \",result.rows);\r\n        data.roles.forEach(role => {\r\n            insertQuery = `insert into eg_test_userrole_v1(role_code, role_tenantid, user_id, user_tenantid, lastmodifieddate) values ('${role}', '${result.rows[0].tenantid}', ${result.rows[0].id} , '${data.tenantid}', '${data.lastmodifieddate}');` \r\n            res = client.query(insertQuery);\r\n        });\r\n    });\r\n    return res;\r\n}\r\n\r\nexport const getUser = function(req,callback){\r\n    let user = req.username ? req.username : req.body.username ;\r\n\r\n    let getQuery = `select * from eg_test_user_table where username = '${user}'`;\r\n    client\r\n        .query(getQuery)\r\n        .then(result => {\r\n            console.log(\"res: \",result.rows);\r\n            return callback(result.rows);         \r\n        })\r\n}"]}