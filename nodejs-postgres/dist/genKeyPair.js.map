{"version":3,"sources":["../src/genKeyPair.js"],"names":["genKeyPair","keyPair","crypto","generateKeyPairSync","modulusLength","publicKeyEncoding","type","format","privateKeyEncoding","fs","writeFileSync","__dirname","replace","publicKey","err","console","log","message","privateKey"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AAEO,IAAMA,kCAAa,SAAbA,UAAa,GAAW;;AAEjC;AACA,QAAMC,UAAUC,iBAAOC,mBAAP,CAA2B,KAA3B,EAAkC;AAC9CC,uBAAe,IAD+B,EACzB;AACrBC,2BAAmB;AACfC,kBAAM,OADS,EACA;AACfC,oBAAQ,KAFO,CAED;AAFC,SAF2B;AAM9CC,4BAAoB;AAChBF,kBAAM,OADU,EACD;AACfC,oBAAQ,KAFQ,CAEF;AAFE;AAN0B,KAAlC,CAAhB;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAG;AACHE,qBAAGC,aAAH,CAAiBC,UAAUC,OAAV,CAAkB,MAAlB,EAAyB,KAAzB,IAAkC,iBAAnD,EAAsEX,QAAQY,SAA9E;AACC,KAFD,CAGA,OAAMC,GAAN,EAAW;AACPC,gBAAQC,GAAR,CAAY,OAAZ,EAAoBF,IAAIG,OAAxB;AACH;AACD;AACAR,iBAAGC,aAAH,CAAiBC,UAAUC,OAAV,CAAkB,MAAlB,EAAyB,KAAzB,IAAkC,kBAAnD,EAAuEX,QAAQiB,UAA/E;AACH,CA9BM;;AAgCPlB","file":"genKeyPair.js","sourcesContent":["import fs from \"fs\";\r\nimport crypto from \"crypto\";\r\n\r\nexport const genKeyPair = function() {\r\n    \r\n    // Generates an object where the keys are stored in properties `privateKey` and `publicKey`\r\n    const keyPair = crypto.generateKeyPairSync('rsa', {\r\n        modulusLength: 4096, // bits - standard for RSA keys\r\n        publicKeyEncoding: {\r\n            type: 'pkcs1', // \"Public Key Cryptography Standards 1\" \r\n            format: 'pem' // Most common formatting choice\r\n        },\r\n        privateKeyEncoding: {\r\n            type: 'pkcs1', // \"Public Key Cryptography Standards 1\"\r\n            format: 'pem' // Most common formatting choice\r\n        }\r\n    });\r\n\r\n    // let res ={\r\n    //     \"PUB_KEY\" : keyPair.publicKey,\r\n    //     \"PRIV_KEY\" : keyPair.privateKey\r\n    // }\r\n    // return res;\r\n    //console.log(\"chcek pub,priv\",__dirname.replace(\"dist\",\"src\"),\"::\",keyPair.privateKey,\":\",keyPair.publicKey);\r\n    // Create the public key file\r\n    try{\r\n    fs.writeFileSync(__dirname.replace(\"dist\",\"src\") + '/id_rsa_pub.pem', keyPair.publicKey); \r\n    }\r\n    catch(err) {\r\n        console.log(\"err: \",err.message)\r\n    }\r\n    // Create the private key file\r\n    fs.writeFileSync(__dirname.replace(\"dist\",\"src\") + '/id_rsa_priv.pem', keyPair.privateKey);\r\n}\r\n\r\ngenKeyPair();"]}