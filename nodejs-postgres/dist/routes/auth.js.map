{"version":3,"sources":["../../src/routes/auth.js"],"names":["pathToKey","path","join","__dirname","replace","PUB_KEY","fs","readFileSync","router","get","passport","authenticate","session","req","res","next","status","json","success","msg","post","then","result","console","log","userId","body","id","err","sucess","uname","username","pswd","password","length","user","jwt","token","expiresIn","secret","verify","algorithms","refreshToken","refreshTokens","sign","send"],"mappings":"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","file":"auth.js","sourcesContent":["import { Router } from \"express\";\r\nimport randtoken from \"rand-token\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { insert,getUser,insertInto } from \"../services/userQuery\";\r\nimport { issueJWT } from \"../lib/utils\";\r\n// import { passport } from \"../app\";\r\nimport passport from \"passport\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\n\r\nconst pathToKey = path.join(__dirname.replace(\"dist\",\"src\"), '..', 'id_rsa_pub.pem');\r\nconst PUB_KEY = fs.readFileSync(pathToKey, 'utf8');\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/protectedResource', passport.authenticate('jwt', { session: false }), (req, res, next) => {\r\n    res.status(200).json({ success: true, msg: \"You are successfully authenticated to this route!\"});\r\n});\r\n\r\n\r\nrouter.post('/register',(req, res, next) => {\r\n    try{\r\n        insert(req,res).then(()=>{\r\n        });   \r\n        let result = insertInto(req,res);\r\n        console.log(\"success\",result);\r\n        res.json({success: true, msg: \"User Registered Successfully\", userId: req.body.id,});\r\n    }\r\n    catch(err){\r\n        res.json({sucess:false, msg: err});\r\n    }\r\n})\r\n\r\nrouter.post('/login',(req,res,next) => {\r\n    let uname = req.body.username\r\n    let pswd = req.body.password\r\n    try{\r\n        getUser(req,function(result){\r\n            //console.log(\"check result: \",result);\r\n            console.log(\"result: \",result[0].username,result[0].password,result.length);\r\n            if(result && (uname===result[0].username) && (pswd===result[0].password))\r\n            {\r\n                var user = {\r\n                    \"username\":result[0].username,\r\n                    \"id\": result[0].id\r\n                }\r\n                var jwt =  issueJWT(user);\r\n                res.json({sucess:true, msg: \"User is Validated\",token: jwt.token,expiresIn:jwt.expiresIn});\r\n            }else{\r\n                res.json({sucess:false, msg: \"Authentication Failed\"});\r\n            }\r\n        });  \r\n    }\r\n    catch(err){\r\n        res.json({sucess:false, msg: err});\r\n    }\r\n})\r\n\r\nrouter.post('/verify',(req,res,next) => {\r\n    var token = req.body.token;\r\n    var secret = PUB_KEY; \r\n    try{\r\n        jwt.verify(token,secret, {algorithms : 'RS256'});\r\n        res.json({success:true, msg:token + \" is valid\"})\r\n    }\r\n    catch(err){\r\n        res.json({success:false, msg:err})\r\n    }\r\n})\r\n\r\nrouter.post('/token',(req,res,next) => {\r\n    var username = req.body.username\r\n    var refreshToken = req.body.refreshToken\r\n    if((refreshToken in refreshTokens) && (refreshTokens[refreshToken] === username)) {\r\n        var user = {\r\n            'username': username,\r\n            'role': 'Admin'\r\n        }\r\n        var token = jwt.sign(user, secret, {expiresIn: 300})\r\n        res.json({token: 'JWT ' + token})\r\n    }\r\n    else{\r\n        res.send(401)\r\n    }\r\n})\r\n\r\nrouter.post('/token/reject', (req,res,next) => {\r\n    var refreshToken = req.body.refreshToken;\r\n    if(refreshToken in refreshTokens)\r\n    {\r\n        delete refreshTokens[refreshToken];\r\n    }\r\n    res.send(204)\r\n})\r\n\r\nexport default router;"]}